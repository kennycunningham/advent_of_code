#!/usr/bin/env ruby

require 'time'

guard_duty_input = File.open('input.txt')
guard_map = {}
guard_duty = []
guard_duty_input.readlines.each do |schedule|
  guard_duty << schedule
end
sorted_guard_duty = guard_duty.sort
guard_number = ''
guard_status = ''
sorted_guard_duty.each_index do |point|
  sched_sect = sorted_guard_duty[point].split(']')
  current_date = Time.parse(sched_sect[0].gsub(/\[\]/,''))
  guard_number = sched_sect[1].split(' ')[1].gsub(/#/,'') if sched_sect[1].include?('begins shift')
  guard_status = '#' if sched_sect[1].include?('falls asleep')
  guard_status = '.' if sched_sect[1].include?('begins shift')
  guard_status = '.' if sched_sect[1].include?('wakes up')
  guard_map[current_date.to_s] = { guard_number: guard_number, guard_status: guard_status }
  # backfill time in minutes
  if point < (sorted_guard_duty.length - 1)
    sched_sect = sorted_guard_duty[point + 1].split(']')
    date = Time.parse(sched_sect[0].gsub(/\[\]/,''))
    while current_date < date
      guard_map[current_date.to_s] = { guard_number: guard_number, guard_status: guard_status }
      current_date = current_date + 60
    end
  end
end

# Remove unimportant minutes
guard_map.each do |times, data|
  date = Time.parse(times)
  guard_map.delete(times) if date.hour != 0
end

# Need to pick the guard that sleeps the most
guard_counts = {}
guard_map.each do |times, data|
  guard_counts[data[:guard_number]] = 0 if guard_counts[data[:guard_number]].nil?
  guard_counts[data[:guard_number]] += 1 if data[:guard_status] == '#'
end
puts guard_counts

# Need to pick the best minute
sleep_guard_id = ''
sleep_guard_count = 0
guard_counts.each do |badge, data|
  if data.to_i > sleep_guard_count
    sleep_guard_id = badge
    sleep_guard_count = data.to_i
  end
end

# Need to collect counts for all minutes
minutes_asleep = {}
guard_map.each do |times, data|
  if data[:guard_number] == sleep_guard_id
    minute = Time.parse(times).min
    minutes_asleep[minute] = 0 if minutes_asleep[minute].nil?
    minutes_asleep[minute] += 1 if data[:guard_status] == '#'
  end
end

# Need to pick the best minute
sleep_minute = 0
sleep_minute_count = 0
minutes_asleep.each do |minute, count|
  if count.to_i > sleep_minute_count
    sleep_minute = minute
    sleep_minute_count = count.to_i
  end
end
puts "Sleep guard id: #{sleep_guard_id}"
puts "Sleep minutes #{sleep_minute}"
puts "Result: #{sleep_guard_id.to_i * sleep_minute}"

# Which guard sleep the most on one specific minute
guard_minute_count = {}
guard_map.each do |times, data|
  minute = Time.parse(times).min
  guard_minute_count[minute] = {} if guard_minute_count[minute].nil?
  guard_minute_count[minute][data[:guard_number]] = 0 if guard_minute_count[minute][data[:guard_number]].nil?
  guard_minute_count[minute][data[:guard_number]] += 1 if data[:guard_status] == '#'
end
guard_minute = 0
guard_id = 0
guard_asleep_count = 0
guard_minute_count.each do |minute, data|
  data.each do |guard_badge, count|
    if count.to_i > guard_asleep_count
      guard_asleep_count = count.to_i
      guard_id = guard_badge.to_i
      guard_minute = minute.to_i
    end
  end
end
puts "Guard asleep at most likely minute: #{guard_minute * guard_id}"
